// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SayItRequest struct {
	// The number of points received.
	Language             string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayItRequest) Reset()         { *m = SayItRequest{} }
func (m *SayItRequest) String() string { return proto.CompactTextString(m) }
func (*SayItRequest) ProtoMessage()    {}
func (*SayItRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *SayItRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayItRequest.Unmarshal(m, b)
}
func (m *SayItRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayItRequest.Marshal(b, m, deterministic)
}
func (m *SayItRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayItRequest.Merge(m, src)
}
func (m *SayItRequest) XXX_Size() int {
	return xxx_messageInfo_SayItRequest.Size(m)
}
func (m *SayItRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SayItRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SayItRequest proto.InternalMessageInfo

func (m *SayItRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type SayItResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Language             string   `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SayItResponse) Reset()         { *m = SayItResponse{} }
func (m *SayItResponse) String() string { return proto.CompactTextString(m) }
func (*SayItResponse) ProtoMessage()    {}
func (*SayItResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}

func (m *SayItResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SayItResponse.Unmarshal(m, b)
}
func (m *SayItResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SayItResponse.Marshal(b, m, deterministic)
}
func (m *SayItResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayItResponse.Merge(m, src)
}
func (m *SayItResponse) XXX_Size() int {
	return xxx_messageInfo_SayItResponse.Size(m)
}
func (m *SayItResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SayItResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SayItResponse proto.InternalMessageInfo

func (m *SayItResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SayItResponse) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func init() {
	proto.RegisterType((*SayItRequest)(nil), "hello.SayItRequest")
	proto.RegisterType((*SayItResponse)(nil), "hello.SayItResponse")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x48, 0xcd, 0xc9,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xb4, 0xb8, 0x78, 0x82,
	0x13, 0x2b, 0x3d, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0x72,
	0x12, 0xf3, 0xd2, 0x4b, 0x13, 0xd3, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c,
	0x25, 0x7b, 0x2e, 0x5e, 0xa8, 0xda, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x21, 0x2e, 0x96,
	0x92, 0xd4, 0x8a, 0x12, 0xa8, 0x42, 0x30, 0x1b, 0xc5, 0x00, 0x26, 0x54, 0x03, 0x8c, 0x6c, 0xb9,
	0x58, 0x3d, 0x40, 0xb6, 0x0a, 0x99, 0x70, 0xb1, 0x82, 0x4d, 0x12, 0x12, 0xd6, 0x83, 0xb8, 0x09,
	0xd9, 0x0d, 0x52, 0x22, 0xa8, 0x82, 0x10, 0xcb, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x2e, 0x37, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x89, 0x01, 0x2b, 0x0f, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	SayIt(ctx context.Context, in *SayItRequest, opts ...grpc.CallOption) (*SayItResponse, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayIt(ctx context.Context, in *SayItRequest, opts ...grpc.CallOption) (*SayItResponse, error) {
	out := new(SayItResponse)
	err := c.cc.Invoke(ctx, "/hello.Hello/SayIt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	SayIt(context.Context, *SayItRequest) (*SayItResponse, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) SayIt(ctx context.Context, req *SayItRequest) (*SayItResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayIt not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayItRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/SayIt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayIt(ctx, req.(*SayItRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayIt",
			Handler:    _Hello_SayIt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
